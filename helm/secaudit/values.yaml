replicaCount: 1

image:
  repository: ghcr.io/alexbergh/secaudit-core
  pullPolicy: IfNotPresent
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8080"
  prometheus.io/path: "/metrics"

podSecurityContext:
  runAsNonRoot: false
  runAsUser: 0
  fsGroup: 0

securityContext:
  # Security: Use minimal capabilities instead of privileged mode
  # CIS Kubernetes Benchmark 5.2.5: Minimize the admission of privileged containers
  privileged: false
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
    add:
      - SYS_ADMIN          # Required for mount operations and system inspection
      - SYS_PTRACE         # Required for process inspection
      - DAC_READ_SEARCH    # Required for reading protected files
      - AUDIT_READ         # Required for audit log access
      - NET_ADMIN          # Required for network configuration checks
  readOnlyRootFilesystem: false
  seccompProfile:
    type: RuntimeDefault

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: false
  className: "nginx"
  annotations: {}
  hosts:
    - host: secaudit.local
      paths:
        - path: /
          pathType: Prefix
  tls: []

resources:
  limits:
    cpu: 2000m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 512Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80

healthCheck:
  enabled: true
  liveness:
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  readiness:
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

nodeSelector: {}

tolerations: []

affinity: {}

persistence:
  enabled: true
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 10Gi
  mountPath: /app/results

config:
  level: baseline
  workers: 4
  profiles:
    - profiles/base/linux.yml
  
  logLevel: INFO
  logFile: /app/logs/secaudit.log

hostPaths:
  enabled: true
  paths:
    - name: etc
      hostPath: /etc
      mountPath: /host/etc
      readOnly: true
    - name: var
      hostPath: /var
      mountPath: /host/var
      readOnly: true
    - name: sys
      hostPath: /sys
      mountPath: /host/sys
      readOnly: true
    - name: proc
      hostPath: /proc
      mountPath: /host/proc
      readOnly: true

cronjob:
  enabled: false
  schedule: "0 2 * * *"
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Forbid

monitoring:
  serviceMonitor:
    enabled: false
    interval: 30s
    scrapeTimeout: 10s
  
  prometheusRule:
    enabled: false
    rules: []

rbac:
  create: true
  
  # Viewers - read-only access to results
  viewers:
    - name: security-team
      kind: Group
    # - name: user@example.com
    #   kind: User
  
  # Auditors - can run audits and manage results
  auditors:
    - name: audit-operators
      kind: Group
    # - name: auditor@example.com
    #   kind: User
  
  # Admins - full control
  admins:
    - name: security-admins
      kind: Group
    # - name: admin@example.com
    #   kind: User

authentication:
  enabled: false
  
  # JWT authentication
  jwt:
    enabled: false
    secret: ""  # Set via --set or secrets
    issuer: "secaudit"
    expiration: 24h
  
  # API keys
  apiKeys:
    enabled: false
    keys: []
    # - name: ci-pipeline
    #   key: ""  # Set via secrets
    #   roles: [auditor]
  
  # OIDC integration
  oidc:
    enabled: false
    issuerUrl: ""
    clientId: ""
    clientSecret: ""  # Set via secrets

auditLog:
  enabled: true
  
  # Log all API calls and audit executions
  logLevel: INFO
  
  # Retention
  retentionDays: 90
  
  # Output destinations
  destinations:
    - type: file
      path: /app/logs/audit.log
    # - type: syslog
    #   host: syslog.example.com
    #   port: 514
    # - type: elasticsearch
    #   url: https://elasticsearch.example.com
    #   index: secaudit-audit

encryption:
  enabled: false
  
  # GPG encryption for reports
  gpg:
    enabled: false
    # Public key for encryption (base64 or path)
    publicKey: ""
    # Private key for decryption (base64 or path)
    privateKey: ""
    # Passphrase for private key
    passphrase: ""
    # Recipients for report encryption
    recipients:
      - security-team@example.com
    # Sign reports
    sign: true
    # Remove original files after encryption
    removeOriginal: false
  
  # AES encryption for temporary data
  aes:
    enabled: false
    # 32-byte key (base64 encoded)
    key: ""
  
  # Encryption at rest
  atRest:
    enabled: false
    # Storage class with encryption
    storageClass: encrypted-ssd

tls:
  enabled: false
  
  # TLS certificate (PEM format)
  certificate: ""
  # TLS private key (PEM format)
  privateKey: ""
  # CA certificate (optional)
  ca: ""
  
  # Cert-manager integration
  certManager:
    enabled: false
    issuer: letsencrypt-prod
    issuerKind: ClusterIssuer
    challengeType: http01
    duration: 2160h  # 90 days
    renewBefore: 360h  # 15 days
  
  # mTLS (mutual TLS)
  mtls:
    enabled: false
    # Require client certificates
    requireClientCert: false
    # Trusted CA for client certificates
    clientCA: ""

externalSecrets:
  # SECURITY RECOMMENDATION: Enable External Secrets for production!
  # External Secrets Operator must be installed in the cluster first:
  # helm repo add external-secrets https://charts.external-secrets.io
  # helm install external-secrets external-secrets/external-secrets \
  #   -n external-secrets-system --create-namespace
  enabled: false  # Set to true for production
  
  # External Secrets Operator integration
  secretStore: vault-backend
  secretStoreKind: SecretStore
  refreshInterval: 1h
  
  # Example configuration for common secrets:
  data:
    - secretKey: gpg-passphrase
      remoteKey: secaudit/gpg
      property: passphrase
    - secretKey: jwt-secret
      remoteKey: secaudit/auth
      property: jwt_secret
    - secretKey: aes-encryption-key
      remoteKey: secaudit/encryption
      property: aes_key
  
  # For AWS Secrets Manager:
  # secretStore: aws-secrets-manager
  # secretStoreKind: ClusterSecretStore
  # data:
  #   - secretKey: gpg-passphrase
  #     remoteRef:
  #       key: prod/secaudit/gpg-passphrase
  
  # For Azure Key Vault:
  # secretStore: azure-keyvault
  # secretStoreKind: ClusterSecretStore
  # data:
  #   - secretKey: gpg-passphrase
  #     remoteRef:
  #       key: secaudit-gpg-passphrase
  
  # For Google Secret Manager:
  # secretStore: gcpsm-secret-store
  # secretStoreKind: ClusterSecretStore
  # data:
  #   - secretKey: gpg-passphrase
  #     remoteRef:
  #       key: projects/PROJECT_ID/secrets/secaudit-gpg-passphrase

vault:
  enabled: false
  # HashiCorp Vault integration
  role: secaudit
  secretPath: secret/data/secaudit
  # Vault agent sidecar injection
  agentInject: true

networkPolicy:
  # SECURITY RECOMMENDATION: Enable Network Policies for production!
  # Requires a CNI plugin that supports NetworkPolicy (Calico, Cilium, Weave Net)
  # CIS Kubernetes Benchmark 5.3.2: Ensure that all Namespaces have Network Policies defined
  enabled: false  # Set to true for production
  
  ingress:
    enabled: true
    # Allow ingress from same namespace by default
    allowFromNamespaces: {}
    # Custom ingress rules (optional)
    rules: []
    # Example:
    # - from:
    #   - namespaceSelector:
    #       matchLabels:
    #         name: monitoring
    #   ports:
    #   - protocol: TCP
    #     port: 8080
  
  egress:
    # Allow DNS resolution (required)
    allowDNS: true
    
    # Allow HTTPS to external services (for updates, APIs)
    allowExternal: false
    
    # Monitoring namespace for Prometheus
    monitoringNamespace: monitoring
    
    # Elasticsearch configuration
    elasticsearch:
      enabled: false
      namespaceSelector:
        name: logging
      podSelector: {}
      port: 9200
    
    # Custom egress rules
    customRules: []
    # Example: Allow egress to specific CIDR
    # - namespaceSelector: {}
    #   ipBlock:
    #     cidr: 10.0.0.0/8
    #     except:
    #     - 10.0.1.0/24
    #   ports:
    #   - protocol: TCP
    #     port: 443
    
    # Custom rules (full control)
    rules: []
    # Example:
    # - to:
    #   - podSelector:
    #       matchLabels:
    #         app: database
    #   ports:
    #   - protocol: TCP
    #     port: 5432
