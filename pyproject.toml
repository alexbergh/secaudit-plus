[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "secaudit-plus"
version = "1.0.0"
description = "CLI tool for security auditing of GNU/Linux systems with YAML-based profiles"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "Apache-2.0"}
authors = [
    {name = "Alex Hellberg", email = "alex@example.com"}
]
maintainers = [
    {name = "Alex Hellberg", email = "alex@example.com"}
]
keywords = ["security", "audit", "compliance", "linux", "fstek", "cis"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: System Administrators",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: System :: Systems Administration",
]

dependencies = [
  "PyYAML>=6.0.1",
  "Jinja2>=3.1.5",
  "colorama>=0.4.6",
  "jsonschema>=4.0.0",
  "packaging>=24.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=8.2.0",
    "pytest-cov>=4.1.0",
    "flake8>=7.1.0",
    "mypy>=1.10.0",
    "yamllint>=1.35.1",
    "black>=24.1.0",
    "isort>=5.13.0",
    "bandit>=1.7.6",
    "safety>=3.0.0",
    "pre-commit>=3.6.0",
]

[project.urls]
Homepage = "https://github.com/alexbergh/secaudit-core"
Documentation = "https://github.com/alexbergh/secaudit-core/blob/main/README.md"
Repository = "https://github.com/alexbergh/secaudit-core"
Issues = "https://github.com/alexbergh/secaudit-core/issues"
Changelog = "https://github.com/alexbergh/secaudit-core/blob/main/CHANGELOG.md"

[project.scripts]
secaudit = "secaudit.main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["secaudit*", "modules*", "utils*", "seclib*"]

[tool.setuptools.package-data]
secaudit = ["*.j2"]
reports = ["*.j2"]

# Black configuration
[tool.black]
line-length = 120
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--showlocals",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["modules", "secaudit", "seclib", "utils"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

# mypy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_optional = false
ignore_missing_imports = true

# Bandit configuration
[tool.bandit]
exclude_dirs = ["/tests", "/test_*.py"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection in controlled contexts
